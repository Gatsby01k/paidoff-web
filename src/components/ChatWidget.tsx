import React, { useEffect, useRef, useState } from "react";

type Msg = { role: "user" | "bot"; text: string };

const canned = (q: string): string => {
  const s = q.toLowerCase();
  if (s.includes("—Ä–∏—Å–∫") || s.includes("risk")) return "–†–µ–∂–∏–º—ã: LOW ~5%/–º–µ—Å, MEDIUM ~12%/–º–µ—Å, HIGH ~–¥–æ 28%/–º–µ—Å. –í—ã–±–∏—Ä–∞–π –±–∞–ª–∞–Ω—Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.";
  if (s.includes("–¥–µ–ø–æ–∑–∏—Ç") || s.includes("–º–∏–Ω–∏–º") || s.includes("min"))
    return "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç ‚Äî 50 USDT. –î–ª—è HIGH —Å–æ–≤–µ—Ç—É–µ–º ‚â• 250 USDT.";
  if (s.includes("—Å—Ä–æ–∫") || s.includes("lock") || s.includes("–ø–µ—Ä–∏–æ–¥"))
    return "Lock –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: –æ—Ç 1 –¥–æ 12 –º–µ—Å—è—Ü–µ–≤. –°—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.";
  if (s.includes("–∫–∏–∫") || s.includes("kyc"))
    return "–ù–µ—Ç KYC –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞.";
  return "–Ø AI-–±–æ—Ç PaidOFF. –°–ø—Ä–æ—Å–∏ –ø—Ä–æ —Ä–∏—Å–∫, –¥–µ–ø–æ–∑–∏—Ç, —Å—Ä–æ–∫ –∏–ª–∏ –∫–∞–∫ –Ω–∞—á–∞—Ç—å ‚Äî –ø–æ–º–æ–≥—É ‚ú®";
};

export default function ChatWidget() {
  const [open, setOpen] = useState(false);
  const [input, setInput] = useState("");
  const [msgs, setMsgs] = useState<Msg[]>([
    { role: "bot", text: "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç PaidOFF. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —Ä–∏—Å–∫–∞—Ö, —Å—Ä–æ–∫–∞—Ö –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ü§ñ" },
  ]);
  const [typing, setTyping] = useState(false);
  const endRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [msgs, typing, open]);

  const send = () => {
    const q = input.trim();
    if (!q) return;
    setMsgs((m) => [...m, { role: "user", text: q }]);
    setInput("");
    setTyping(true);
    setTimeout(() => {
      setTyping(false);
      setMsgs((m) => [...m, { role: "bot", text: canned(q) }]);
    }, 600);
  };

  return (
    <>
      {/* FAB */}
      {!open && (
        <button
          onClick={() => setOpen(true)}
          className="fixed bottom-6 right-6 z-40 px-5 py-4 rounded-full bg-[#ffe500] text-black font-black shadow-[0_10px_30px_rgba(255,229,0,.35)]"
          aria-label="Chat with AI bot"
        >
          ü§ñ Chat
        </button>
      )}

      {/* –ü–∞–Ω–µ–ª—å */}
      {open && (
        <div className="fixed bottom-6 right-6 z-40 w-[360px] max-w-[92vw] rounded-2xl bg-[#0e0f11] border border-yellow-500/20 shadow-[0_20px_50px_rgba(0,0,0,.45)] overflow-hidden">
          <div className="px-4 py-3 flex items-center gap-2 border-b border-yellow-500/15">
            <span className="text-lg">ü§ñ</span>
            <div className="font-black">PaidOFF Bot</div>
            <div className="ml-auto text-xs text-yellow-300/70">Online</div>
            <button className="ml-3 text-yellow-300/70 hover:text-yellow-100" onClick={() => setOpen(false)}>‚úï</button>
          </div>
          <div className="h-72 overflow-y-auto p-3 space-y-2">
            {msgs.map((m, i) => (
              <div key={i} className={`max-w-[85%] px-3 py-2 rounded-2xl ${m.role === "user" ? "ml-auto bg-yellow-400 text-black" : "bg-[#121316] border border-yellow-500/15 text-yellow-200"}`}>
                {m.text}
              </div>
            ))}
            {typing && <div className="px-3 py-2 rounded-2xl bg-[#121316] border border-yellow-500/15 text-yellow-200 w-24">–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶</div>}
            <div ref={endRef} />
          </div>
          <div className="p-3 flex gap-2">
            <input
              className="flex-1 input"
              placeholder="–°–ø—Ä–æ—Å–∏ –±–æ—Ç–∞‚Ä¶"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && send()}
            />
            <button className="btn btn-primary" onClick={send}>Send</button>
          </div>
        </div>
      )}
    </>
  );
}

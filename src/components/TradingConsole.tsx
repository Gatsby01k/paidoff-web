// src/components/TradingConsole.tsx
import React, { useState } from "react";
import RobotAssistantCanvas from "./RobotAssistantCanvas";
import type { Risk } from "../lib/deposits";

type Msg = { from: "user" | "bot"; text: string };

export default function TradingConsole({ risk }: { risk: Risk }) {
  const [open, setOpen] = useState(false);
  const [msg, setMsg] = useState("");
  const [log, setLog] = useState<Msg[]>([]);
  const [trigger, setTrigger] = useState(0);

  function send() {
    const q = msg.trim();
    if (!q) return;
    setMsg("");
    setLog((l) => [...l, { from: "user", text: q }]);

    // –ø–æ–¥–∂–∏–≥–∞–µ–º –Ω–æ–≤—É—é ¬´—Å–¥–µ–ª–∫—É¬ª
    setTrigger((t) => t + 1);

    const reply = makeReply(q, risk);
    setTimeout(() => {
      setLog((l) => [...l, { from: "bot", text: reply }]);
    }, 350);
  }

  return (
    <div className="glow p-3">
      <div className="card relative overflow-hidden">
        {/* –í–ï–°–¨ –ë–õ–û–ö ‚Äî –†–û–ë–û–¢ */}
        <div className="h-[360px] md:h-[420px]">
          <RobotAssistantCanvas risk={risk} trigger={trigger} onAsk={() => setOpen(true)} />
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ */}
        <div className="absolute left-4 bottom-4">
          <button
            className="btn-primary px-4 py-2"
            onClick={() => setOpen((o) => !o)}
          >
            {open ? "–°–≤–µ—Ä–Ω—É—Ç—å —á–∞—Ç" : "–°–ø—Ä–æ—Å–∏—Ç—å —Ä–æ–±–æ—Ç–∞"}
          </button>
        </div>

        {/* –°–ª–∞–π–¥–µ—Ä —á–∞—Ç–∞ */}
        <div
          className={
            "absolute left-0 right-0 bottom-0 transition-transform duration-300 " +
            (open ? "translate-y-0" : "translate-y-[88%]")
          }
        >
          <div className="mx-3 mb-3 rounded-2xl bg-black/70 backdrop-blur border border-white/10">
            <div className="max-h-44 overflow-y-auto p-3 space-y-2 text-sm">
              {log.length === 0 && (
                <div className="opacity-60">
                  –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫. –°–ø—Ä–æ—Å–∏ –ø—Ä–æ —Ä–∏—Å–∫, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏.
                </div>
              )}
              {log.map((m, i) => (
                <div key={i} className={m.from === "user" ? "text-yellow-200" : "text-neutral-200"}>
                  <span className="opacity-50">
                    {m.from === "user" ? "–í—ã:" : "–ë–æ—Ç:"}
                  </span>{" "}
                  {m.text}
                </div>
              ))}
            </div>
            <div className="flex items-center gap-2 p-3 border-t border-white/10">
              <input
                value={msg}
                onChange={(e) => setMsg(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && send()}
                placeholder="–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å‚Ä¶"
                className="flex-1 bg-white/5 rounded-xl px-3 py-2 outline-none"
              />
              <button onClick={send} className="btn-primary px-4 py-2">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// –ø—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ-–ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
function makeReply(q: string, risk: Risk) {
  const apr = risk === "HIGH" ? 25 : risk === "MEDIUM" ? 12 : 5;
  if (/apr|–¥–æ—Ö–æ–¥|–ø—Ä–∏–±—ã–ª/i.test(q))
    return `–î–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${risk} –º–æ–¥–µ–ª—å–Ω—ã–π APR ‚âà ${apr}%/–º–µ—Å. –†–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä—ã–Ω–∫–∞.`;
  if (/—Å—Ä–æ–∫|–º–µ—Å—è—Ü|period|term/i.test(q))
    return `–î–ª—è ${risk} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–µ—Ä–∂–∞—Ç—å –æ—Ç ${
      risk === "HIGH" ? 3 : 1
    } –¥–æ ${risk === "HIGH" ? 6 : 3} –º–µ—Å—è—Ü–µ–≤.`;
  if (/—Ä–∏—Å–∫|–±–µ–∑–æ–ø–∞—Å/i.test(q))
    return `–ü—Ä–æ—Ñ–∏–ª—å ${risk}: ${
      risk === "HIGH"
        ? "–±–æ–ª—å—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤—ã—à–µ"
        : "—É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –∏ –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
    }.`;
  return "–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ APR, —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ä–æ–∫–∏. –°–ø—Ä–æ—Å–∏ üôÇ";
}

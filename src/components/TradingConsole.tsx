// src/components/TradingConsole.tsx
import React, { useState } from "react";
import RobotAssistantCanvas from "./RobotAssistantCanvas";
import type { Risk } from "../lib/deposits";

type Msg = { from: "user" | "bot"; text: string };

export default function TradingConsole({ risk }: { risk: Risk }) {
  const [open, setOpen] = useState(false);
  const [msg, setMsg] = useState("");
  const [log, setLog] = useState<Msg[]>([]);
  const [trigger, setTrigger] = useState(0);

  function send() {
    const q = msg.trim();
    if (!q) return;
    setMsg("");
    setLog((l) => [...l, { from: "user", text: q }]);

    // –ø–æ–¥—Å–≤–µ—Ç–∏–º "—Å–¥–µ–ª–∫—É" –∏ –¥–≤–∏–∂–µ–Ω–∏–µ —Ä—É–∫–∏
    setTrigger((t) => t + 1);

    const reply = makeReply(q, risk);
    setTimeout(() => {
      setLog((l) => [...l, { from: "bot", text: reply }]);
    }, 350);
  }

  return (
    <div className="glow p-3">
      <div className="card overflow-hidden">
        {/* –•–µ–¥–µ—Ä –ø–∞–Ω–µ–ª–∏ */}
        <div className="flex items-center justify-between px-4 py-3 border-b border-white/10">
          <div className="text-sm tracking-wide opacity-70">AI Trading Console</div>
          <button className="btn-primary px-4 py-2" onClick={() => setOpen((o) => !o)}>
            {open ? "–°–≤–µ—Ä–Ω—É—Ç—å —á–∞—Ç" : "–°–ø—Ä–æ—Å–∏—Ç—å —Ä–æ–±–æ—Ç–∞"}
          </button>
        </div>

        {/* –†–æ–±–æ—Ç + "–∂–∏–≤–æ–π –≥—Ä–∞—Ñ–∏–∫" */}
        <div className="h-[360px] md:h-[420px]">
          <RobotAssistantCanvas risk={risk} trigger={trigger} />
        </div>

        {/* –ß–∞—Ç —Å–Ω–∏–∑—É ‚Äî –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º */}
        <div
          className={`transition-all duration-300 ${
            open ? "max-h-56 opacity-100" : "max-h-0 opacity-0"
          } overflow-hidden`}
        >
          <div className="px-4 pb-3 pt-2 border-t border-white/10 bg-black/40 backdrop-blur">
            <div className="max-h-40 overflow-y-auto space-y-2 text-sm py-2">
              {log.length === 0 && (
                <div className="opacity-60">–Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫. –°–ø—Ä–æ—Å–∏ –ø—Ä–æ APR, —Ä–∏—Å–∫ –∏ —Å—Ä–æ–∫–∏.</div>
              )}
              {log.map((m, i) => (
                <div key={i} className={m.from === "user" ? "text-yellow-200" : "text-neutral-200"}>
                  <span className="opacity-50">{m.from === "user" ? "–í—ã:" : "–ë–æ—Ç:"}</span> {m.text}
                </div>
              ))}
            </div>
            <div className="flex items-center gap-2">
              <input
                value={msg}
                onChange={(e) => setMsg(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && send()}
                placeholder="–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å‚Ä¶"
                className="flex-1 bg-white/5 rounded-xl px-3 py-2 outline-none"
              />
              <button onClick={send} className="btn-primary px-4 py-2">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// –ø—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ-–ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
function makeReply(q: string, risk: Risk) {
  const apr = risk === "HIGH" ? 25 : risk === "MEDIUM" ? 12 : 5;
  if (/apr|–¥–æ—Ö–æ–¥|–ø—Ä–∏–±—ã–ª/i.test(q))
    return `–î–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${risk} –º–æ–¥–µ–ª—å–Ω—ã–π APR ‚âà ${apr}%/–º–µ—Å. –†–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä—ã–Ω–∫–∞.`;
  if (/—Å—Ä–æ–∫|–º–µ—Å—è—Ü|period|term/i.test(q))
    return `–î–ª—è ${risk} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–µ—Ä–∂–∞—Ç—å –æ—Ç ${
      risk === "HIGH" ? 3 : 1
    } –¥–æ ${risk === "HIGH" ? 6 : 3} –º–µ—Å—è—Ü–µ–≤.`;
  if (/—Ä–∏—Å–∫|–±–µ–∑–æ–ø–∞—Å/i.test(q))
    return `–ü—Ä–æ—Ñ–∏–ª—å ${risk}: ${
      risk === "HIGH"
        ? "–≤—ã—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
        : "—É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –∏ –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    }.`;
  return "–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ APR, —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ä–æ–∫–∏. –°–ø—Ä–æ—Å–∏ üôÇ";
}
